!function(t){try{t=angular.module("abacus.templates")}catch(e){t=angular.module("abacus.templates",[])}t.run(["$templateCache",function(t){"use strict";t.put("templates/barChart.html","")}])}(),function(t){try{t=angular.module("abacus.templates")}catch(e){t=angular.module("abacus.templates",[])}t.run(["$templateCache",function(t){"use strict";t.put("templates/chart.html",'<svg ng-attr-width="{{ width }}" ng-attr-height="{{ height }}">\n  <g ng-transclude>\n  </g>\n</svg>\n')}])}(),function(t){try{t=angular.module("abacus.templates")}catch(e){t=angular.module("abacus.templates",[])}t.run(["$templateCache",function(t){"use strict";t.put("templates/pieChart.html",'<abc-chart width="width" height="height">\n  <g stroke="black" ng-repeat="segment in getAngles()">\n  </g>\n</abc-chart>\n\n')}])}(),function(){"use strict";angular.module("abacus",["abacus.templates"])}(),function(){"use strict"}(),function(){"use strict";angular.module("abacus").directive("abcChart",[function(){return{restrict:"E",templateUrl:"templates/chart.html",transclude:!0,scope:{width:"=",height:"="}}}])}(),function(){"use strict";angular.module("abacus").directive("abcPieChart",[function(){return{restrict:"E",templateUrl:"templates/pieChart.html",scope:{data:"="},link:function(t){t.width=200,t.height=200,t.getValues=function(){return t.data},t.getTotal=function(){return t.getValues().reduce(function(t,e){return t+e})},t.getAngles=function(){var e=t.getTotal();return t.getValues().map(function(t){return t/e*2*Math.PI})};var e=function(t,e,a,n){var u=t+a*Math.cos(n),r=e+a*Math.sin(n);return[u,r]};t.getSegments=function(){var a=t.getAngles();return a.map(function(a){return e(t.width/2,t.width/2,t.width/2,a)})}}}}])}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlbXBsYXRlcy5qcyIsImFiYWN1cy5qcyIsImJhckNoYXJ0LmpzIiwiY2hhcnQuanMiLCJwaWVDaGFydC5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJhbmd1bGFyIiwiZXJyIiwicnVuIiwiJHRlbXBsYXRlQ2FjaGUiLCJwdXQiLCJkaXJlY3RpdmUiLCJyZXN0cmljdCIsInRlbXBsYXRlVXJsIiwidHJhbnNjbHVkZSIsInNjb3BlIiwid2lkdGgiLCJoZWlnaHQiLCJkYXRhIiwibGluayIsImdldFZhbHVlcyIsImdldFRvdGFsIiwicmVkdWNlIiwiYSIsImIiLCJnZXRBbmdsZXMiLCJ0b3RhbCIsIm1hcCIsInZhbHVlIiwiTWF0aCIsIlBJIiwicG9sYXJUb0NhcnRlc2lhbiIsImNlbnRlclgiLCJjZW50ZXJZIiwicmFkaXVzIiwiYW5nbGUiLCJ4IiwiY29zIiwieSIsInNpbiIsImdldFNlZ21lbnRzIiwiYW5nbGVzIl0sIm1hcHBpbmdzIjoiQ0FBQSxTQUFBQSxHQUNBLElBQUFBLEVBQUFDLFFBQUFELE9BQUEsb0JBQ0EsTUFBQUUsR0FBQUYsRUFBQUMsUUFBQUQsT0FBQSx1QkFDQUEsRUFBQUcsS0FBQSxpQkFBQSxTQUFBQyxHQUNBLFlBQ0FBLEdBQUFDLElBQUEsMEJBQ0EsVUFJQSxTQUFBTCxHQUNBLElBQUFBLEVBQUFDLFFBQUFELE9BQUEsb0JBQ0EsTUFBQUUsR0FBQUYsRUFBQUMsUUFBQUQsT0FBQSx1QkFDQUEsRUFBQUcsS0FBQSxpQkFBQSxTQUFBQyxHQUNBLFlBQ0FBLEdBQUFDLElBQUEsdUJBQ0EsZ0hBUUEsU0FBQUwsR0FDQSxJQUFBQSxFQUFBQyxRQUFBRCxPQUFBLG9CQUNBLE1BQUFFLEdBQUFGLEVBQUFDLFFBQUFELE9BQUEsdUJBQ0FBLEVBQUFHLEtBQUEsaUJBQUEsU0FBQUMsR0FDQSxZQUNBQSxHQUFBQyxJQUFBLDBCQUNBLHNJQzlCQSxXQUNBLFlBRUFKLFNBQUFELE9BQUEsVUFBQSx3QkNIQSxXQUNBLGdCQ0RBLFdBQ0EsWUFFQUMsU0FBQUQsT0FBQSxVQUVBTSxVQUFBLFlBQUEsV0FDQSxPQUNBQyxTQUFBLElBQ0FDLFlBQUEsdUJBQ0FDLFlBQUEsRUFDQUMsT0FDQUMsTUFBQSxJQUNBQyxPQUFBLFlDWkEsV0FDQSxZQUVBWCxTQUFBRCxPQUFBLFVBRUFNLFVBQUEsZUFBQSxXQUNBLE9BQ0FDLFNBQUEsSUFDQUMsWUFBQSwwQkFDQUUsT0FDQUcsS0FBQSxLQUVBQyxLQUFBLFNBQUFKLEdBQ0FBLEVBQUFDLE1BQUEsSUFDQUQsRUFBQUUsT0FBQSxJQUVBRixFQUFBSyxVQUFBLFdBQ0EsTUFBQUwsR0FBQUcsTUFHQUgsRUFBQU0sU0FBQSxXQUNBLE1BQUFOLEdBQUFLLFlBQUFFLE9BQUEsU0FBQUMsRUFBQUMsR0FDQSxNQUFBRCxHQUFBQyxLQUlBVCxFQUFBVSxVQUFBLFdBQ0EsR0FBQUMsR0FBQVgsRUFBQU0sVUFFQSxPQUFBTixHQUFBSyxZQUFBTyxJQUFBLFNBQUFDLEdBQ0EsTUFBQUEsR0FBQUYsRUFBQSxFQUFBRyxLQUFBQyxLQUlBLElBQUFDLEdBQUEsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQSxHQUFBQyxHQUFBSixFQUFBRSxFQUFBTCxLQUFBUSxJQUFBRixHQUNBRyxFQUFBTCxFQUFBQyxFQUFBTCxLQUFBVSxJQUFBSixFQUVBLFFBQUFDLEVBQUFFLEdBR0F2QixHQUFBeUIsWUFBQSxXQUNBLEdBQUFDLEdBQUExQixFQUFBVSxXQUVBLE9BQUFnQixHQUFBZCxJQUFBLFNBQUFRLEdBQ0EsTUFBQUosR0FBQWhCLEVBQUFDLE1BQUEsRUFBQUQsRUFBQUMsTUFBQSxFQUFBRCxFQUFBQyxNQUFBLEVBQUFtQiIsImZpbGUiOiJhYmFjdXMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHsgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2FiYWN1cy50ZW1wbGF0ZXMnKTsgfVxuY2F0Y2goZXJyKSB7IG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdhYmFjdXMudGVtcGxhdGVzJywgW10pOyB9XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAndXNlIHN0cmljdCc7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dCgndGVtcGxhdGVzL2JhckNoYXJ0Lmh0bWwnLFxuICAgICcnKTtcbn1dKTtcbn0pKCk7XG5cbihmdW5jdGlvbihtb2R1bGUpIHtcbnRyeSB7IG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdhYmFjdXMudGVtcGxhdGVzJyk7IH1cbmNhdGNoKGVycikgeyBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnYWJhY3VzLnRlbXBsYXRlcycsIFtdKTsgfVxubW9kdWxlLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJ3RlbXBsYXRlcy9jaGFydC5odG1sJyxcbiAgICAnPHN2ZyBuZy1hdHRyLXdpZHRoPVwie3sgd2lkdGggfX1cIiBuZy1hdHRyLWhlaWdodD1cInt7IGhlaWdodCB9fVwiPlxcbicgK1xuICAgICcgIDxnIG5nLXRyYW5zY2x1ZGU+XFxuJyArXG4gICAgJyAgPC9nPlxcbicgK1xuICAgICc8L3N2Zz5cXG4nICtcbiAgICAnJyk7XG59XSk7XG59KSgpO1xuXG4oZnVuY3Rpb24obW9kdWxlKSB7XG50cnkgeyBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnYWJhY3VzLnRlbXBsYXRlcycpOyB9XG5jYXRjaChlcnIpIHsgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2FiYWN1cy50ZW1wbGF0ZXMnLCBbXSk7IH1cbm1vZHVsZS5ydW4oWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KCd0ZW1wbGF0ZXMvcGllQ2hhcnQuaHRtbCcsXG4gICAgJzxhYmMtY2hhcnQgd2lkdGg9XCJ3aWR0aFwiIGhlaWdodD1cImhlaWdodFwiPlxcbicgK1xuICAgICcgIDxnIHN0cm9rZT1cImJsYWNrXCIgbmctcmVwZWF0PVwic2VnbWVudCBpbiBnZXRBbmdsZXMoKVwiPlxcbicgK1xuICAgICcgIDwvZz5cXG4nICtcbiAgICAnPC9hYmMtY2hhcnQ+XFxuJyArXG4gICAgJ1xcbicgK1xuICAgICcnKTtcbn1dKTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgIFxuICBhbmd1bGFyLm1vZHVsZSgnYWJhY3VzJywgWydhYmFjdXMudGVtcGxhdGVzJ10pO1xufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXIubW9kdWxlKCdhYmFjdXMnKVxuXG4gIC5kaXJlY3RpdmUoJ2FiY0NoYXJ0JywgW2Z1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZXMvY2hhcnQuaHRtbCcsXG4gICAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgICAgc2NvcGU6IHtcbiAgICAgICAgd2lkdGg6ICc9JyxcbiAgICAgICAgaGVpZ2h0OiAnPSdcbiAgICAgIH1cbiAgICB9O1xuICB9XSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgYW5ndWxhci5tb2R1bGUoJ2FiYWN1cycpXG5cbiAgLmRpcmVjdGl2ZSgnYWJjUGllQ2hhcnQnLCBbZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlcy9waWVDaGFydC5odG1sJyxcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIGRhdGE6ICc9J1xuICAgICAgfSxcbiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICBzY29wZS53aWR0aCA9IDIwMDtcbiAgICAgICAgc2NvcGUuaGVpZ2h0ID0gMjAwO1xuXG4gICAgICAgIHNjb3BlLmdldFZhbHVlcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBzY29wZS5kYXRhO1xuICAgICAgICB9O1xuXG4gICAgICAgIHNjb3BlLmdldFRvdGFsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHNjb3BlLmdldFZhbHVlcygpLnJlZHVjZShmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYSArIGI7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2NvcGUuZ2V0QW5nbGVzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHRvdGFsID0gc2NvcGUuZ2V0VG90YWwoKTtcblxuICAgICAgICAgIHJldHVybiBzY29wZS5nZXRWYWx1ZXMoKS5tYXAoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiAodmFsdWUgLyB0b3RhbCkgKiAyICogTWF0aC5QSTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTsgICBcblxuICAgICAgICB2YXIgcG9sYXJUb0NhcnRlc2lhbiA9IGZ1bmN0aW9uKGNlbnRlclgsIGNlbnRlclksIHJhZGl1cywgYW5nbGUpIHtcbiAgICAgICAgICAgIHZhciB4ID0gY2VudGVyWCArIHJhZGl1cyAqIE1hdGguY29zKGFuZ2xlKSxcbiAgICAgICAgICAgICAgICB5ID0gY2VudGVyWSArIHJhZGl1cyAqIE1hdGguc2luKGFuZ2xlKTtcblxuICAgICAgICAgICAgcmV0dXJuIFt4LCB5XTtcbiAgICAgICAgfTtcblxuICAgICAgICBzY29wZS5nZXRTZWdtZW50cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhbmdsZXMgPSBzY29wZS5nZXRBbmdsZXMoKTtcblxuICAgICAgICAgIHJldHVybiBhbmdsZXMubWFwKGZ1bmN0aW9uKGFuZ2xlKSB7XG4gICAgICAgICAgICByZXR1cm4gcG9sYXJUb0NhcnRlc2lhbihzY29wZS53aWR0aCAvIDIsIHNjb3BlLndpZHRoIC8gMiwgc2NvcGUud2lkdGggLyAyLCBhbmdsZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcbiAgfV0pO1xufSkoKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==